// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: pkg/proto/activity_log.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ActivityLogService_CreateActivityLog_FullMethodName = "/activity_log.ActivityLogService/CreateActivityLog"
	ActivityLogService_GetActivityLog_FullMethodName    = "/activity_log.ActivityLogService/GetActivityLog"
	ActivityLogService_ListActivityLogs_FullMethodName  = "/activity_log.ActivityLogService/ListActivityLogs"
)

// ActivityLogServiceClient is the client API for ActivityLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ActivityLogService defines the gRPC service for activity logs
type ActivityLogServiceClient interface {
	CreateActivityLog(ctx context.Context, in *CreateActivityLogRequest, opts ...grpc.CallOption) (*CreateActivityLogResponse, error)
	GetActivityLog(ctx context.Context, in *GetActivityLogRequest, opts ...grpc.CallOption) (*GetActivityLogResponse, error)
	ListActivityLogs(ctx context.Context, in *ListActivityLogsRequest, opts ...grpc.CallOption) (*ListActivityLogsResponse, error)
}

type activityLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityLogServiceClient(cc grpc.ClientConnInterface) ActivityLogServiceClient {
	return &activityLogServiceClient{cc}
}

func (c *activityLogServiceClient) CreateActivityLog(ctx context.Context, in *CreateActivityLogRequest, opts ...grpc.CallOption) (*CreateActivityLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateActivityLogResponse)
	err := c.cc.Invoke(ctx, ActivityLogService_CreateActivityLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityLogServiceClient) GetActivityLog(ctx context.Context, in *GetActivityLogRequest, opts ...grpc.CallOption) (*GetActivityLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActivityLogResponse)
	err := c.cc.Invoke(ctx, ActivityLogService_GetActivityLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityLogServiceClient) ListActivityLogs(ctx context.Context, in *ListActivityLogsRequest, opts ...grpc.CallOption) (*ListActivityLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListActivityLogsResponse)
	err := c.cc.Invoke(ctx, ActivityLogService_ListActivityLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActivityLogServiceServer is the server API for ActivityLogService service.
// All implementations must embed UnimplementedActivityLogServiceServer
// for forward compatibility.
//
// ActivityLogService defines the gRPC service for activity logs
type ActivityLogServiceServer interface {
	CreateActivityLog(context.Context, *CreateActivityLogRequest) (*CreateActivityLogResponse, error)
	GetActivityLog(context.Context, *GetActivityLogRequest) (*GetActivityLogResponse, error)
	ListActivityLogs(context.Context, *ListActivityLogsRequest) (*ListActivityLogsResponse, error)
	mustEmbedUnimplementedActivityLogServiceServer()
}

// UnimplementedActivityLogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedActivityLogServiceServer struct{}

func (UnimplementedActivityLogServiceServer) CreateActivityLog(context.Context, *CreateActivityLogRequest) (*CreateActivityLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActivityLog not implemented")
}
func (UnimplementedActivityLogServiceServer) GetActivityLog(context.Context, *GetActivityLogRequest) (*GetActivityLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivityLog not implemented")
}
func (UnimplementedActivityLogServiceServer) ListActivityLogs(context.Context, *ListActivityLogsRequest) (*ListActivityLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActivityLogs not implemented")
}
func (UnimplementedActivityLogServiceServer) mustEmbedUnimplementedActivityLogServiceServer() {}
func (UnimplementedActivityLogServiceServer) testEmbeddedByValue()                            {}

// UnsafeActivityLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityLogServiceServer will
// result in compilation errors.
type UnsafeActivityLogServiceServer interface {
	mustEmbedUnimplementedActivityLogServiceServer()
}

func RegisterActivityLogServiceServer(s grpc.ServiceRegistrar, srv ActivityLogServiceServer) {
	// If the following call pancis, it indicates UnimplementedActivityLogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ActivityLogService_ServiceDesc, srv)
}

func _ActivityLogService_CreateActivityLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActivityLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityLogServiceServer).CreateActivityLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityLogService_CreateActivityLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityLogServiceServer).CreateActivityLog(ctx, req.(*CreateActivityLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityLogService_GetActivityLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivityLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityLogServiceServer).GetActivityLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityLogService_GetActivityLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityLogServiceServer).GetActivityLog(ctx, req.(*GetActivityLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActivityLogService_ListActivityLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActivityLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityLogServiceServer).ListActivityLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActivityLogService_ListActivityLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityLogServiceServer).ListActivityLogs(ctx, req.(*ListActivityLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActivityLogService_ServiceDesc is the grpc.ServiceDesc for ActivityLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActivityLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "activity_log.ActivityLogService",
	HandlerType: (*ActivityLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateActivityLog",
			Handler:    _ActivityLogService_CreateActivityLog_Handler,
		},
		{
			MethodName: "GetActivityLog",
			Handler:    _ActivityLogService_GetActivityLog_Handler,
		},
		{
			MethodName: "ListActivityLogs",
			Handler:    _ActivityLogService_ListActivityLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/activity_log.proto",
}
